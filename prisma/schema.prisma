// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  firstName String?
  lastName  String?
  company   String?
  phone     String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  customers   Customer[]
  invoices    Invoice[]
  leads       Lead[]
  appointments Appointment[]
  payments    Payment[]
  documents   Document[]

  @@map("users")
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  company   String?
  notes     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String   @map("user_id")

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices    Invoice[]
  appointments Appointment[]
  leads       Lead[]

  @@map("customers")
}

model Invoice {
  id          String   @id @default(cuid())
  number      String   @unique
  customerId  String   @map("customer_id")
  userId      String   @map("user_id")
  amount      Float
  tax         Float    @default(0)
  total       Float
  status      String   @default("draft")
  dueDate     DateTime @map("due_date")
  paidDate    DateTime? @map("paid_date")
  description String?
  items       Json?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments Payment[]

  @@map("invoices")
}

model Lead {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  company   String?
  source    String?
  status    String   @default("new")
  notes     String?
  userId    String   @map("user_id")
  customerId String? @map("customer_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  customer Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  @@map("leads")
}

model Appointment {
  id         String   @id @default(cuid())
  title      String
  description String?
  startTime  DateTime @map("start_time")
  endTime    DateTime @map("end_time")
  location   String?
  status     String   @default("scheduled")
  userId     String   @map("user_id")
  customerId String?  @map("customer_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  customer Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  @@map("appointments")
}

model Payment {
  id          String   @id @default(cuid())
  invoiceId   String   @map("invoice_id")
  userId      String   @map("user_id")
  amount      Float
  method      String   @default("cash")
  status      String   @default("pending")
  stripeId    String?  @map("stripe_id")
  description String?
  paidAt      DateTime? @map("paid_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Document {
  id          String   @id @default(cuid())
  name        String
  fileUrl     String   @map("file_url")
  status      String   @default("draft")
  uploadedBy  String   @map("uploaded_by")
  uploadedAt  DateTime @default(now()) @map("uploaded_at")
  completedAt DateTime? @map("completed_at")
  metadata    Json?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user       User        @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  signatures Signature[]

  @@map("documents")
}

model Signature {
  id         String   @id @default(cuid())
  documentId String   @map("document_id")
  signerName String   @map("signer_name")
  signerEmail String  @map("signer_email")
  signatureData String @map("signature_data")
  position   Json     // {x, y, width, height, page}
  signedAt   DateTime @default(now()) @map("signed_at")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("signatures")
} 