// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  name        String?
  company     String?
  phone       String?
  role        String   @default("user")
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Password reset functionality
  resetToken      String?
  resetTokenExpiry DateTime?
  
  // Profile data
  firstName   String?
  lastName    String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  
  // Relationships
  invoices     Invoice[]
  customers    Customer[]
  appointments Appointment[]
  payments     Payment[]
  leads        Lead[]
}

model Customer {
  id           String   @id @default(cuid())
  email        String
  name         String
  phone        String?
  company      String?
  address      String?
  contactPerson String?
  customerType String   @default("residential") // residential or commercial
  notifyByEmail Boolean @default(true)
  notifyBySmsText Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relationships
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices     Invoice[]
  appointments Appointment[]
  payments     Payment[]
}

model Invoice {
  id          String   @id @default(cuid())
  invoiceId   String   @unique
  customerName String
  amount      Float
  description String?
  status      String   @default("Pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  customerId  String?
  customer    Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
}

model Appointment {
  id              String   @id @default(cuid())
  title           String
  customer        String
  customerEmail   String?
  type            String   @default("Installation") // Installation, Consultation, Maintenance, Follow-up
  date            DateTime
  time            String
  duration        String?
  location        String?
  status          String   @default("Scheduled") // Scheduled, In Progress, Completed, Cancelled
  priority        String   @default("Medium") // High, Medium, Low
  notes           String?
  estimatedValue  Float?
  photoUrl        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  customerId      String?
  customerRecord  Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
}

model Payment {
  id              String   @id @default(cuid())
  invoiceId       String?
  invoiceNumber   String?
  customerName    String
  amount          Float
  status          String   @default("Pending") // Pending, Paid, Failed, Refunded
  paymentDate     DateTime?
  paymentMethod   String?
  stripePaymentId String?
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships  
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  customerId      String?
  customer        Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
}

model Lead {
  id              String   @id @default(cuid())
  name            String
  email           String
  phone           String?
  company         String?
  location        String?
  source          String   @default("Website") // Website, Referral, Cold Call, Social Media, Advertisement, Trade Show, Google Ads
  status          String   @default("New") // New, Contacted, Qualified, Interested, Not Interested, Converted, Lost
  score           Int      @default(0) // 1-100
  estimatedValue  Float    @default(0)
  probability     Int      @default(0) // 0-100
  assignedTo      String?
  createdDate     String
  lastContact     String?
  nextFollowUp    String?
  notes           String?
  tags            String   @default("[]") // JSON array as string
  interests       String   @default("[]") // JSON array as string
  priority        String   @default("Medium") // High, Medium, Low
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
} 